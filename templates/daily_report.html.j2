<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>{{ report_title }}</title>
  <style>
    :root{
      --primary: #1A8A85;
      --primary-600: #15736E;
      --ok: #16a34a;
      --fail: #ef4444;
      --blocked: #f59e0b;
      --retest: #3b82f6;
      --untested: #9ca3af;
      --bg: #F8F9FA;
      --card-bg: #ffffff;
      --text: #222222;
      --muted: #666666;
      --border: #EAEAEA;
      --shadow: 0 10px 25px rgba(0,0,0,.06);
      --radius: 12px;
    }
    @media (prefers-color-scheme: dark){
      :root{
        --bg: #111315;
        --card-bg: #15181c;
        --text: #EAEAEA;
        --muted: #B3B3B3;
        --border: #22252a;
        --shadow: 0 10px 25px rgba(0,0,0,.4);
      }
    }
    *{ box-sizing: border-box; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 0; color: var(--text); background: var(--bg); }
    .wrap { max-width: 1100px; margin: 24px auto; padding: 0 16px; }
    h1 { margin: 0 0 8px; font-weight: 700; letter-spacing: .2px; }
    a { color: var(--primary-600); text-decoration: none; }
    a:hover { text-decoration: underline; }
    .toolbar { display:flex; gap:8px; align-items:center; margin: 8px 0 14px; }
    .btn { padding: 8px 12px; border: 1px solid var(--primary); background: var(--primary); color:#fff; cursor:pointer; border-radius:10px; font-size: 13px; }
    .btn:hover { background: var(--primary-600); }
    .card { background: var(--card-bg); border: 1px solid var(--border); border-radius: var(--radius); padding: 14px; margin: 14px 0; box-shadow: var(--shadow); }
    .table-wrap { border: 1px solid var(--border); border-radius: 10px; overflow: auto; box-shadow: var(--shadow); position: relative; }
    table { width: 100%; border-collapse: collapse; table-layout: fixed; }
    th, td { border-bottom: 1px solid var(--border); padding: 8px 10px; font-size: 13px; vertical-align: top; word-break: break-word; background: var(--card-bg); }
    thead th {
      background: var(--card-bg); /* solid background to prevent overlap */
      text-align: left;
      position: sticky;  /* keep header visible while body scrolls */
      top: 0;
      z-index: 5;
      box-shadow: 0 1px 0 var(--border), 0 2px 6px rgba(0,0,0,0.04);
    }
    tbody tr:nth-child(odd){ background: rgba(0,0,0,0.02); }
    tbody tr:hover { background: rgba(0,0,0,0.04); }
    .pill { padding: 2px 8px; border-radius: 999px; font-size: 12px; display:inline-block; font-weight: 600; }
    .ok { background: color-mix(in srgb, var(--ok) 18%, transparent); color: var(--ok); }
    .fail { background: color-mix(in srgb, var(--fail) 18%, transparent); color: var(--fail); }
    .blocked { background: color-mix(in srgb, var(--blocked) 18%, transparent); color: var(--blocked); }
    .retest { background: color-mix(in srgb, var(--retest) 18%, transparent); color: var(--retest); }
    .untested { background: color-mix(in srgb, var(--untested) 18%, transparent); color: var(--untested); }
    .donut { width: 170px; height: 170px; border-radius: 50%; position: relative; box-shadow: var(--shadow); }
    .donut::after { content: ""; position: absolute; inset: 34px; background: var(--card-bg); border-radius: 50%; }
    .table-controls { display:flex; align-items:center; gap:12px; margin:8px 0; flex-wrap:wrap; justify-content:flex-end; }
    .table-controls label { display:inline-flex; align-items:center; gap:6px; color: var(--muted); font-size: 12px; }
    .table-controls select { padding: 4px 8px; border: 1px solid var(--border); border-radius: 8px; background: var(--card-bg); color: var(--text); }
    .muted { color:var(--muted); font-size:12px; }
  </style>
</head>
<body>
  <div class="wrap">
  <h1>{{ report_title }}</h1>
  <div class="toolbar">
    <button class="btn" onclick="downloadHTML()">Download HTML</button>
  </div>
  <p class="muted"><b>Generated:</b> {{ generated_at }}</p>
  <p>
    <b>Project:</b>
    {% if base_url and project_id %}
      <a href="{{ base_url }}/index.php?/projects/overview/{{ project_id }}" target="_blank" rel="noopener">{{ project_name }}</a>
    {% else %}
      {{ project_name }}
    {% endif %}
    {% if plan_name and plan_id %}
      | <b>Plan:</b> <a href="{{ base_url }}/index.php?/plans/view/{{ plan_id }}" target="_blank" rel="noopener">{{ plan_name }}</a>
    {% endif %}
  </p>

  <div class="card">
    <h3>Project Status</h3>
    <div style="display:flex; gap:16px; align-items:center; flex-wrap:wrap;">
      <div class="donut" style="background: {{ donut_style }}"></div>
      <div>
        {% if donut_legend and donut_legend|length > 0 %}
          {% for seg in donut_legend %}
            <div style="display:flex; align-items:center; gap:8px; margin:4px 0;">
              <span style="display:inline-block; width:12px; height:12px; background: {{ seg.color }}; border-radius:2px;"></span>
              <span>{{ seg.label }}: {{ seg.count }} ({{ seg.percent }}%)</span>
            </div>
          {% endfor %}
        {% else %}
          <span>No data</span>
        {% endif %}
      </div>
    </div>
  </div>

  <div class="card">
    <h3>Summary</h3>
    <p>Total: {{ summary.total }} | Passed: {{ summary.Passed }} | Failed: {{ summary.Failed }} | Pass Rate: {{ summary.pass_rate }}%</p>
  </div>

  {# Time-based trend removed per request #}

  {% for t in tables %}
  <div class="card run-card" id="run-{{ t.run_id }}" data-run-id="{{ t.run_id }}">
    <h3>Run #{{ t.run_id }}{% if t.run_name %} - {{ t.run_name }}{% endif %}</h3>
    <div class="muted" style="margin:6px 0 4px;">Pass Rate: {{ t.pass_rate }}%</div>
    <div class="run-chips" data-run-id="{{ t.run_id }}" style="display:flex; gap:8px; flex-wrap:wrap; margin-bottom:6px;">
      <button type="button" class="btn" data-status="">All</button>
      {% for label in ['Failed','Blocked','Retest','Untested','Passed'] %}
        {% set c = t.counts[label] | default(0) %}
        {% if c > 0 %}
          <button type="button" class="btn" data-status="{{ label }}">{{ label }} ({{ c }})</button>
        {% endif %}
      {% endfor %}
    </div>
    <div style="display:flex; align-items:center; gap:14px; flex-wrap:wrap; margin:8px 0;">
      <div class="donut" style="width:110px; height:110px; background: {{ t.donut_style }}"></div>
      <div>
        {% for seg in t.donut_legend %}
          <div style="display:flex; align-items:center; gap:8px; font-size:12px;">
            <span style="display:inline-block; width:10px; height:10px; background: {{ seg.color }}; border-radius:2px;"></span>
            <span>{{ seg.label }}: {{ seg.count }}</span>
          </div>
        {% endfor %}
      </div>
    </div>

    <div class="table-controls" data-run-id="{{ t.run_id }}">
      <label>Search: <input type="search" class="table-filter" placeholder="keyword..." data-run-id="{{ t.run_id }}"></label>
      <label>Status:
        <select class="filter-status" data-run-id="{{ t.run_id }}">
          <option value="">All</option>
          <option value="Passed">Passed</option>
          <option value="Failed">Failed</option>
          <option value="Blocked">Blocked</option>
          <option value="Retest">Retest</option>
          <option value="Untested">Untested</option>
        </select>
      </label>
      <label>Assignee:
        <select class="filter-assignee" data-run-id="{{ t.run_id }}">
          <option value="">All</option>
        </select>
      </label>
      <label>Priority:
        <select class="filter-priority" data-run-id="{{ t.run_id }}">
          <option value="">All</option>
        </select>
      </label>
      <label><input type="checkbox" class="filter-hide-untested" data-run-id="{{ t.run_id }}"> Hide Untested</label>
      <label>Rows:
        <select class="page-size" data-run-id="{{ t.run_id }}">
          <option value="10" selected>10</option>
          <option value="15">15</option>
          <option value="20">20</option>
          <option value="25">25</option>
          <option value="50">50</option>
        </select>
      </label>
    </div>
    <div class="table-wrap" id="wrap-{{ t.run_id }}">
    <table id="table-{{ t.run_id }}">
      <colgroup>
        <col style="width:7%" />
        <col style="width:45%" />
        <col style="width:8%" />
        <col style="width:25%" />
        <col style="width:7%" />
        <col style="width:8%" />
      </colgroup>
      <thead>
        <tr>
          <th data-sort-by="test_id">ID</th>
          <th data-sort-by="title">Title</th>
          <th data-sort-by="status_name">Status</th>
          <th data-sort-by="assignee">Assignee</th>
          <th data-sort-by="refs">Refs</th>
          <th data-sort-by="priority">Priority</th>
        </tr>
      </thead>
      <tbody id="rows-{{ t.run_id }}">
        {% for r in t.rows %}
        <tr data-status="{{ (r.status_name or '')|string|lower }}" data-assignee="{{ (r.assignee or '')|string|lower }}" data-priority="{{ (r.priority or '')|string|lower }}">
          <td>
            {% if base_url and r.test_id %}
              <a href="{{ base_url }}/index.php?/tests/view/{{ r.test_id }}" target="_blank" rel="noopener">{{ r.test_id }}</a>
            {% else %}
              {{ r.test_id }}
            {% endif %}
          </td>
          <td>{{ r.title }}</td>
          <td>
            {% if r.status_name == 'Passed' %}
              <span class="pill ok">Passed</span>
            {% elif r.status_name == 'Failed' %}
              <span class="pill fail">Failed</span>
            {% else %}
              {{ r.status_name }}
            {% endif %}
          </td>
          <td>{{ r.assignee or '' }}</td>
          <td>
            {% if r.refs %}
              {% set refs = (r.refs|string).split(',') %}
              {% for ref in refs %}
                {% set ref_trim = ref.strip() %}
                {% if ref_trim %}
                  <a href="{{ jira_base }}{{ ref_trim }}" target="_blank" rel="noopener">{{ ref_trim }}</a>{% if not loop.last %}, {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          </td>
          <td>{{ r.priority or '' }}</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
    </div>
  </div>
  {% endfor %}
  <script>
    (function(){
      function setupRun(runId){
        const tbody = document.getElementById('rows-' + runId);
        const table = document.getElementById('table-' + runId);
        const wrap = document.getElementById('wrap-' + runId);
        if(!tbody || !table || !wrap) return;
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const total = rows.length;
        const ctrl = document.querySelector('.table-controls[data-run-id="' + runId + '"]');
        const sizeSel = ctrl ? ctrl.querySelector('.page-size') : null;
        const key = 'report_rows_visible';
        let rowsVisible = parseInt(localStorage.getItem(key) || '10', 10);
        if (isNaN(rowsVisible) || rowsVisible <= 0) rowsVisible = 10;

        function applyHeight(){
          const headerH = table.tHead ? table.tHead.getBoundingClientRect().height : 36;
          const firstRow = rows[0];
          const rowH = firstRow ? firstRow.getBoundingClientRect().height : 36;
          const desired = Math.round(headerH + rowH * rowsVisible + 2);
          wrap.style.maxHeight = desired + 'px';
        }

        if (sizeSel) {
          sizeSel.value = String(rowsVisible);
          sizeSel.addEventListener('change', () => {
            const v = parseInt(sizeSel.value || '10', 10);
            rowsVisible = isNaN(v) ? 10 : v;
            localStorage.setItem(key, String(rowsVisible));
            applyHeight();
          });
        }

        // Initial height
        applyHeight();
        // Also adjust on window resize as row height may change
        window.addEventListener('resize', applyHeight);
      }

      document.addEventListener('DOMContentLoaded', function(){
        document.querySelectorAll('.run-card').forEach(card => {
          setupRun(card.getAttribute('data-run-id'));
        });
      });
    })();
  </script>
  <script>
    (function() {
      function setupInteractiveTable(runId) {
        const table = document.getElementById('table-' + runId);
        const tbody = document.getElementById('rows-' + runId);
        const filterInput = document.querySelector('.table-filter[data-run-id="' + runId + '"]');
        const statusSel = document.querySelector('.filter-status[data-run-id="' + runId + '"]');
        const assigneeSel = document.querySelector('.filter-assignee[data-run-id="' + runId + '"]');
        const prioritySel = document.querySelector('.filter-priority[data-run-id="' + runId + '"]');
        const hideUntested = document.querySelector('.filter-hide-untested[data-run-id="' + runId + '"]');
        const chips = document.querySelectorAll('.run-chips[data-run-id="' + runId + '"] [data-status]');
        if (!table || !tbody || !filterInput) return;

        // Populate assignee & priority options from rows
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const uniq = (arr)=> Array.from(new Set(arr)).filter(Boolean).sort((a,b)=> a.localeCompare(b));
        const assignees = uniq(rows.map(r=> (r.dataset.assignee||'').trim()).filter(Boolean));
        const priorities = uniq(rows.map(r=> (r.dataset.priority||'').trim()).filter(Boolean));
        if (assigneeSel && assignees.length){ assigneeSel.innerHTML = '<option value="">All</option>' + assignees.map(a=> `<option>${a}</option>`).join(''); }
        if (prioritySel && priorities.length){ prioritySel.innerHTML = '<option value="">All</option>' + priorities.map(p=> `<option>${p}</option>`).join(''); }

        // Filtering
        function applyFilters(){
          const text = (filterInput.value || '').toLowerCase();
          const status = (statusSel && statusSel.value) || '';
          const assignee = (assigneeSel && assigneeSel.value || '').toLowerCase();
          const priority = (prioritySel && prioritySel.value || '').toLowerCase();
          const hideU = !!(hideUntested && hideUntested.checked);
          rows.forEach(row => {
            const rowText = row.textContent.toLowerCase();
            const rs = (row.dataset.status || '');
            const ra = (row.dataset.assignee || '');
            const rp = (row.dataset.priority || '');
            let visible = true;
            if (text && !rowText.includes(text)) visible = false;
            if (visible && status && rs !== status.toLowerCase()) visible = false;
            if (visible && assignee && ra !== assignee) visible = false;
            if (visible && priority && rp !== priority) visible = false;
            if (visible && hideU && rs === 'untested') visible = false;
            row.style.display = visible ? '' : 'none';
          });
        }
        filterInput.addEventListener('keyup', applyFilters);
        if (statusSel) statusSel.addEventListener('change', applyFilters);
        if (assigneeSel) assigneeSel.addEventListener('change', applyFilters);
        if (prioritySel) prioritySel.addEventListener('change', applyFilters);
        if (hideUntested) hideUntested.addEventListener('change', applyFilters);

        // Quick presets removed per request

        // Status chips click → apply status filter immediately
        chips.forEach(ch => {
          ch.addEventListener('click', () => {
            const v = ch.getAttribute('data-status') || '';
            if (statusSel) statusSel.value = v;
            applyFilters();
          });
        });

        // Sorting
        table.querySelectorAll('thead th[data-sort-by]').forEach(header => {
          header.style.cursor = 'pointer';
          header.addEventListener('click', () => {
            const sortBy = header.getAttribute('data-sort-by');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const sortDir = header.getAttribute('data-sort-dir') === 'asc' ? 'desc' : 'asc';
            header.setAttribute('data-sort-dir', sortDir);

            rows.sort((a, b) => {
              const aText = a.querySelector(`td:nth-child(${header.cellIndex + 1})`).textContent.trim();
              const bText = b.querySelector(`td:nth-child(${header.cellIndex + 1})`).textContent.trim();
              
              if (aText < bText) return sortDir === 'asc' ? -1 : 1;
              if (aText > bText) return sortDir === 'asc' ? 1 : -1;
              return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
          });
        });
      }

      document.addEventListener('DOMContentLoaded', function(){
        document.querySelectorAll('.run-card').forEach(card => {
          setupInteractiveTable(card.getAttribute('data-run-id'));
        });
      });
    })();
  </script>
  <script>
    function downloadHTML(){
      try {
        const html = document.documentElement.outerHTML;
        const blob = new Blob([html], {type: 'text/html;charset=utf-8'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = {{ (output_filename or 'report.html')|tojson }};
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(url);
        a.remove();
      } catch (e) {
        alert('Failed to download HTML: ' + e);
      }
    }
  </script>
</div>
</body>
</html>
