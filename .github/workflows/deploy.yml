name: Deploy Backend then Frontend

on:
  workflow_dispatch:
    inputs:
      plan:
        description: 'TestRail Plan ID (optional if using run)'
        required: false
        type: number
      run:
        description: 'TestRail Run ID (optional if using plan)'
        required: false
        type: number

jobs:
  deploy_backend:
    name: Deploy Backend (Render)
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail
          if [ -z "${RENDER_API_KEY:-}" ] || [ -z "${RENDER_SERVICE_ID:-}" ]; then
            echo "Render secrets not set; please add RENDER_API_KEY and RENDER_SERVICE_ID" >&2
            exit 1
          fi
          DEPLOY=$(curl -sS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H 'Content-Type: application/json' \
            -d '{}' \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys)
          echo "$DEPLOY" | jq . >/tmp/deploy.json || true
          ID=$(jq -r .id </tmp/deploy.json)
          if [ -z "$ID" ] || [ "$ID" = "null" ]; then
            echo "Failed to trigger Render deploy: $DEPLOY" >&2
            exit 1
          fi
          echo "deploy_id=$ID" >> "$GITHUB_OUTPUT"

      - name: Wait for Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          set -euo pipefail
          echo "Waiting for Render deploy: $DEPLOY_ID"
          ATTEMPTS=90 # ~15 minutes @10s
          for i in $(seq 1 $ATTEMPTS); do
            STATUS=$(curl -sS -H "Authorization: Bearer $RENDER_API_KEY" \
              https://api.render.com/v1/deploys/$DEPLOY_ID | jq -r .status)
            echo "[$i/$ATTEMPTS] status=$STATUS"
            if [ "$STATUS" = "live" ] || [ "$STATUS" = "succeeded" ]; then
              exit 0
            fi
            if [ "$STATUS" = "failed" ] || [ "$STATUS" = "canceled" ]; then
              echo "Render deploy failed with status: $STATUS" >&2
              exit 1
            fi
            sleep 10
          done
          echo "Timed out waiting for Render deploy" >&2
          exit 1

  deploy_frontend:
    name: Deploy Frontend (Netlify)
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build CLI arguments
        id: build_args
        shell: bash
        run: |
          set -euo pipefail
          ARGS=("--project" "1")
          if [ -n "${{ github.event.inputs.plan }}" ]; then ARGS+=("--plan" "${{ github.event.inputs.plan }}"); fi
          if [ -n "${{ github.event.inputs.run }}" ]; then ARGS+=("--run" "${{ github.event.inputs.run }}"); fi
          joined=$(printf '%s ' "${ARGS[@]}")
          joined=${joined%% }
          echo "args=$joined" >> "$GITHUB_OUTPUT"

      - name: Generate report
        env:
          TESTRAIL_BASE_URL: ${{ secrets.TESTRAIL_BASE_URL }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
        run: |
          python testrail_daily_report.py ${{ steps.build_args.outputs.args }}

      - name: Prepare Netlify deploy (set index.html)
        shell: bash
        run: |
          set -euo pipefail
          FILE=$(ls -1t out/*.html | head -n 1)
          cp "$FILE" out/index.html

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Deploy to Netlify (production)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          npx netlify-cli deploy --dir out --prod --site "$NETLIFY_SITE_ID" --message "Automated TestRail report $GITHUB_SHA" --json > deploy.json

      - name: Post summary with links
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          latest=$(ls -1t out/*.html | head -n 1)
          url=""; deploy_url=""
          if [ -f deploy.json ]; then
            url=$(node -e "console.log(JSON.parse(require('fs').readFileSync('deploy.json','utf8')).url || '')")
            deploy_url=$(node -e "console.log(JSON.parse(require('fs').readFileSync('deploy.json','utf8')).deploy_url || '')")
          fi
          {
            echo "### Deploy Summary"
            echo
            echo "- Backend: Render deploy completed"
            echo "- Frontend latest file: $latest"
            if [ -n "$url" ]; then echo "- Netlify URL: $url"; fi
            if [ -n "$deploy_url" ]; then echo "- Deploy URL: $deploy_url"; fi
          } >> "$GITHUB_STEP_SUMMARY"

